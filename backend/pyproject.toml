[project]
name = "temp-fastapi"
version = "0.1.0"
description = ""
readme = "README.md"
authors = [{ name = "Yuri Nakayama", email = "yuri620620@gmail.com" }]
requires-python = ">=3.12,<3.13"
dependencies = [
    "fastapi>=0.117.1",
    "uvicorn>=0.36.0",
    "websockets>=15.0.1",
    "python-dotenv>=1.0.0",
    "httpx>=0.27.0",
    "pydantic>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
lint = [
    "mypy>=1.15.0",
    "pylint>=3.3.2",
    "pytest-coverage>=0.0",
    "pytest>=8.3.4",
    "ruff>=0.8.4",
    "pytest-asyncio>=0.23.0",
]
env = []

[tool.uv]
default-groups = ["lint", "env"]
link-mode = "copy"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "site-packages",
    "venv",
]
line-length = 88
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "W", "B", "I"]
ignore = []
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.mccabe]
max-complexity = 5

[tool.ruff.lint.per-file-ignores]
"notebooks/**/*" = ["E", "F", "W", "B", "I"]
"unc/processes/base/*" = ["E", "F", "W", "B", "I"]

[tool.ruff.lint.isort]
case-sensitive = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
exclude = [".venv", ".github", "poetry.lock", "__pycache__"]
python_version = "3.12"
strict = true
disallow_any_decorated = false
disallow_any_unimported = false
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
strict_optional = true
warn_unreachable = true

[tool.pytest.ini_options]
addopts = [
    '--rootdir=tests',
    '--strict-config',
    '--cov=unc',
    '--log-cli-level=INFO',
    '-p no:cacheprovider',
    '-ra',
]
testpaths = ['tests']
cache_dir = "tests/.pytest_cache"
filterwarnings = ["ignore::pydantic.PydanticDeprecatedSince20"]

[tool.coverage.run]
branch = true
omit = ["**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING",
    "if __name__ == .__main__.",
]

[tool.coverage.xml]
output = "docs/coverage/coverage.xml"

[tool.coverage.html]
directory = "docs/coverage/report"

[tool.pyright]
typeCheckingMode = "basic"
include = ["src", "tests"]
exclude = [
    ".venv",
    "**/traces",
    "**/traces_ts",
    "**/example_files**",
    "**/.pkl",
    "**/bazel-bin",
    "**/bazel",
    "**/resources/**",
    "**/tests/**",
    "**/node_modules",
    "**/.next",
    "**/__pycache__",
    "**/.coverage/**",
    "**/.git",
    "**/dist/**",
    "**/build/**",
    "**/.husky",
    "**/migrations",
]
ignore = [
    "**/node_modules",
    "**/__pycache__",
    "**/.*",
    "**/dist",
    "**/.vscode",
    "**/*.pyi",
    "**/__init__.py",
]
venvPath = "."
venv = ".venv"

[tool.pylint]
ignore-paths = [".venv", ".github"]
max-line-length = 88
